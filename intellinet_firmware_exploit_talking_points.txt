Introduction

Hello and welcome to the demo portion of this presentation. In this demo we will be covering hardware backdoor accounts that are built into IoT devices. Specifically we will be looking at the firmware for an Intellinet NFC-30IR Camera.

The NFC-30IR is an IP security camera used by individual consumers as well as corporate entities. In some cases vendors will hard code backdoor accounts into the firmware for testing purposes, and forget to remove them before shipping the product. These backdoors can potentially present some fairly serious security issues, which is great for us if you're looking to exploit these systems. We’ll be taking a look at this camera firmware, and exploring its firmware to discover information about the device, and hopefully one of these backdoors.

Disclaimer: The firmware exploited in this presentation is version LM.1.6.16.05. These vulnerabilities are allegedly present on other versions as well. Though these vulnerabilities are present on other firmware versions, we have only verified their existence on LM.1.6.16.05 first hand. The exploits were originally reported April of 2017 and the last known firmware we found was released July 2015.

Explanation of firmware (what device? Where can it be found?)

The first step in doing any firmware analysis is to procure the firmware itself. The best place to do this is usually from the manufacturer's website, as these contain the newest, as well as sometimes older versions of firmware. In some cases you may need to find the firmware from alternative sources depending on how old the firmware is as well as the company itself. In this particular case, we had to go to the company that actually builds the firmware for these devices in order to find the firmware version we were looking for. Once found, we can simply download this firmware to a folder and we’re ready to begin!

Binwalk explanation and demonstration

So once we had the firmware downloaded and unzipped we can see it here as COM_T01 with the firmware version, and it's a binary file. From here we can begin to explore the firmware using a tool called binwalk. This tool is used for extracting the firmware so that it can be analyzed and reverse engineered. So the first thing we can see by running binwalk against this .bin file, is that its sectioned into different components. You can see that it's got a kernel, and some gzip compressed data, as well as one that looks to contain an image. Using binwalk we can extract files from this binary, exposing its filesystem and allowing us to explore the firmware further. To do this we can run the command binwalk with options -Me which tells binwalk to extract files recursively from the binary. We can run this, and see as binwalk extracts these files from the binary to a new folder. Navigating to this folder will show us all the extracted information that binwalk pulled from the binary in which we can find the successfully extracted UNIX filesystem for this device. 

After the explanation, begin the search with firmwalker exposing interesting files.

Another interesting tool to use prior to manually exploring this firmware is a tool called firmwalker. This tool will scan the filesystem and output various files of interest it finds, which can help speed up the process of this firmware analysis. You can find this tool on github, and will be linked at the end of this presentation. We can run this tool against the root of the filesystem we extracted, and it will scan the filesystem for these files. You can see from the output that firmwalker found a lot of interesting stuff, some files of note that we can see are a passwd folder, /etc/selfsign.key which could be some kind of encryption key, as well as /etc/boa.conf which is the main configuration file for boa web servers that may contain some sensitive information about the configuration of this device.

Brief analysis of passwd file, showing no specialized service accounts exist

As we can see in /etc/passwd, the only specialized account we see is a user called qmik, which can be found in Intellinet cameras and various TP-Link camera systems. The qmik user has no associated password, and can be accessed via Telnet on systems running this firmware. This however, is not what we should be looking at due to limited access; root will be our primary attack vector as we will discuss in the next section. 

Code analysis of boa.conf and private key (common web config page for boa web servers)

Let's take a look at boa.conf. We will read through some of the notable vulnerabilities found in this file. When the developers of this firmware were building this out, they clearly neglected security and focused fully on availability. 

The first instance of this can be seen on lines 46 and 47 where you can see that the server is running as the root user. We can also see that the group is also set to root, but commented out. They at the very least thought about implementing a form of discretionary access using groups, but unfortunately their implementation is laughable considering that no users or groups were created to run this service. They instead opted for the default root user and groups. This is a major red flag as any user built within boa is ultimately running as root. Therefore, if one of these users is compromised, they immediately have root access. 

Moving down the file, we see something else suspicious. On lines 209 to 212, we see that a Default Type for files is set. It states that this parameter determines the default filetype if a file extension is not known. The default as shown here is text / plain. Based on the wording of the comments, we can assume that the service has no form of filtering unknown file types. This is in fact the case with this system and we will build on that later in this demo.

Now we are going to analyze two of the most shocking vulnerabilities in this firmware. On lines 255 and 256, we can see that there is a hardcoded manufacturer backdoor in the system. The backdoor is poorly implemented with the username “manufacture” and password “erutcafunam”; or manufacture backwards. This is a pattern we will see later. Whether this was left behind by accident after development, or used in cases of remote client support it doesn't matter. These credentials are not only static along all systems running this firmware (and other versions), but it is stored in plaintext on a publicly available file. This could have been mitigated by either storing the credentials in an encrypted format, removing the backdoor entirely, or at the very least, using a better password. 

The manufacture account is designed to access specific manufacture files located in ‘/cgi-bin/mft/’. The files are ‘manufacture.cgi’ and ‘wireless_mft.cgi’. The account is not visible to users using the web interface and it cannot be removed. As the the manufacture account runs on a service as root, privilege escalation is also not only possible, but trivial for a seasoned attacker.

Moving on in the file, just two lines down we can see another set of plaintext credentials running as root. We can see these are disabled by default, but in cases where ActiveX is enabled on the system, this account will be active. The credentials are as trivial as the manufacture account, using the username activex and password xevitac; or activex backwards. This is an unfortunate reality for clients running IoT systems with this firmware. 

The firmware’s web interface relies on basic HTTP authorization. A disclaimer in the boa.conf file ironically states that the password file can only be read by root or trusted users. As all users on the system and web service run as root anyway, this “security measure” has nothing to stand on and the file is practically open to anyone willing to find it. Luckily, boa.conf tells us exactly where it is. We can see that it is located at /var/www/secret.passwd. As this is located in the webroot, we can simply read the file in the browser once authenticated with any of the active user accounts noted above. 

It is also worth noting that we cannot show this password file in this demo as it is built after the webservice runs for the first time. 

Lastly, we can see a static private key which is the same across ALL systems running this firmware. It can be found at /etc/selfsign.key. A recommendation to developers, a key is not private if it is shared publicly on the internet.

Local file inclusion

The firmware’s web interface can also be exploited by means of local file inclusion after authenticating on the system. The default admin credentials are publicly known as admin:admin and are unlikely to be changed. The local files can be read by requesting '/cgi-bin/admin/fileread?READ.filePath=<insert here>'

Instead of the developer using server-side scripts to render data, it takes the plain text files and uses the /fileread CGI script to return the plain text in the browser. The site then relies on Javascript to format the text. No sanitization or security measures are in place to determine which paths the script can be read. Therefore, all files can be viewed in the browser once authenticated. This can be used to read files such as /etc/passwd, /var/www/secret.passwd or /etc/boa.conf.

Conclusion

In general it's clear that hard coding credentials into firmware can pose serious security risks. Not only is it poor development practice, but it also provides attackers potential pivot points and privilege escalation when trying to exploit systems via their backdoor credentials.

Based on how available the firmware for these devices are, and the fact that companies are notorious for including backdoor credentials in finished products the impact of this vulnerability extends far beyond just this device. Manufacturers should ensure that they consider security in the development process to ensure that it's properly implemented throughout the development lifecycle and not simply added as an afterthought.

Citations
“POE-200CAMv2,” AirLive is a well-known IP Surveillance Network solutions, Network Device, Security products provider. [Online]. Available: http://www.cz.airlive.com/support/firmware/POE-200CAMv2. [Accessed: 27-Feb-2020].

D. Fousekis, “Intellinet NFC-30IR Camera - Multiple Vulnerabilities,” Exploit Database, 07-Apr-2017. [Online]. Available: https://www.exploit-db.com/exploits/41829. [Accessed: 27-Feb-2020].

ReFirmLabs, “ReFirmLabs/binwalk,” GitHub. [Online]. Available: https://github.com/ReFirmLabs/binwalk/wiki/Usage. [Accessed: 27-Feb-2020].

craigz28, “craigz28/firmwalker,” GitHub, 23-Jan-2019. [Online]. Available: https://github.com/craigz28/firmwalker. [Accessed: 27-Feb-2020].

Penthe, R., & Fousekis, D. (n.d.). Home. Retrieved from https://www.bitcrack.net/
